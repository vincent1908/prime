                                    ------
                                 Guide Dev TSF
                                    ------
                                  C. MATRANGA
                                    ------
                                  30/09/2013


[../images/logo_tsf_mini_v1.jpg] 

Guide of IHM test development

 * <<{{{Introduction}
  Introduction}}>>

 * <<{{{Prerequisites}
   Prerequisites}}>>

 * <<{{{Creation of IHM test with TSF}
	Creation of IHM test with TSF}}>>
	
 * <<{{{Execution of test HMIs}
	Execution of test HMIs}}>>


{Introduction}

	The guide of IHM test development, has the purpose to present the TSF and Selenium implementation to 
	realize HMI tests of the WEB applications.


{Prerequisites}

	* Development environment :
 
		* Configured Eclipse development tool :
			
			** Configuration TSF : {{{./guide_install.html} see the guide of installation}}
			
			** Current Junit 4 
			
		* A Firefox browser 
		
			** The plugin Selenium IDE must be installed : {{{./guide_install.html} see the guide of installation}} 



{Creation of IHM test with TSF}

	The principle of creating a HMI test is as follows:

		* Start by creating an Abstract class that inherits the class TSF: <<AbstractTSFManagerSeleniumTestCase>>.
		For example, this class called <<AbstractQ3PTestTsf>> is created in a project under run/test/tsf/

		* In the abstract class specific to the project it is possible to add initialization methods, utilities, etc. .

		* Now we need to create a test class for a HMI that will inherit the class <<AbstractQ3PTestTsf>>
		  For example, this class will be named <<TestsGestionParcs>>. This class accepts several test methods
		  covering different scenarios :

			** Access to screen park management

			** Park Creation : different scenarios :
			creation ok, creation error, creation cancellation, partial creation

			** Park Modification : modification ok , modification error, modification cancellation

			** Park deletion : deletion ok, deletion error, deletion cancellation

			** Viewing a Park

			** Sort Parks

			** Rights about the parks

		<< List of methods of test class : TestsGestionParcs >>

[../images/outline_class_test.jpg]


		* To acquire the test from Firefox and Selenium IDE (realized with Firefox 8)

		<<Example acquisition test of a park's creation>>

[../images/acquisition_test_parc.jpg]

		
		* After acquisition, the code must be exported in Java. Several options are available. Firstly choose the 
			framework Junit4 test. Then the choice will depend on the HMI type :

				** The HMIs include HTML frames, we must use a java code generation in RC mode (Remote Control).
				(Export used for Example)

				** The HMIs contains no frame, it is possible to use WebDriver.

				<<Code Generated via export Selenium IDE : Java Junit4 Mode / Remote Control >>
				
+------------------------------------------------------------------------------------------------------------+
package com.example.tests;

import com.thoughtworks.selenium.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.regex.Pattern;

public class TestParcRC {
	private Selenium selenium;

	@Before
	public void setUp() throws Exception {
		selenium = new DefaultSelenium("localhost", 4444, "*chrome", "http://localhost:8080/");
		selenium.start();
	}

	@Test
	public void testParcRC() throws Exception {
		selenium.open("/index.jsp?logout=true");
		selenium.selectFrame("login");
		selenium.click("id=buttonUserLogin");
		selenium.waitForPageToLoad("30000");
		selenium.selectWindow("name=menu");
		selenium.click("//td[2]/div/span");
		selenium.click("//div[@id='listTransaction_1']/div[2]/table/tbody/tr[17]/td[2]/div");
		selenium.selectFrame("relative=up");
		selenium.selectFrame("main");
		selenium.click("id=ecwButtonId");
		selenium.waitForPageToLoad("30000");
		selenium.type("id=codeParc", "CMA");
		selenium.type("id=libelleParc", "PARC CMA");
		selenium.click("id=validate");
		selenium.waitForPageToLoad("30000");
	}

	@After
	public void tearDown() throws Exception {
		selenium.stop();
	}
}	
+----------------------------------------------------------------------------------------------------------+		  

				<<Code Generated via export Selenium IDE : Java Junit4 Mode / WebDriver>>
				
				We notice that in this case the access to the frame is not supported. WebDriver is part of a process
				of advanced HMIs test, using the DIV and not the frames.
				
+------------------------------------------------------------------------------------------------------------+
package com.example.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class TestParcWebDriver {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "http://localhost:8080/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testParcWebDriver() throws Exception {
    driver.get(baseUrl + "/index.jsp?logout=true");
    // ERROR: Caught exception [ERROR: Unsupported command [selectFrame | login | ]]
    driver.findElement(By.id("buttonUserLogin")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | name=menu | ]]
    driver.findElement(By.xpath("//td[2]/div/span")).click();
    driver.findElement(By.xpath("//div[@id='listTransaction_1']/div[2]/table/tbody/tr[17]/td[2]/div")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [selectFrame | relative=up | ]]
    // ERROR: Caught exception [ERROR: Unsupported command [selectFrame | main | ]]
    driver.findElement(By.id("ecwButtonId")).click();
    driver.findElement(By.id("codeParc")).clear();
    driver.findElement(By.id("codeParc")).sendKeys("CMA");
    driver.findElement(By.id("libelleParc")).clear();
    driver.findElement(By.id("libelleParc")).sendKeys("PARC CMA");
    driver.findElement(By.id("validate")).click();
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
+------------------------------------------------------------------------------------------------------------+


				<<Other example of export Selenium IDE : Java Junit4 Mode / WebDriver>>
				
				In this example, PSA portal is used to make HMI test and WebDriver export.
				There is no error in the export because the site doesn't include frame. 
	
+------------------------------------------------------------------------------------------------------------+
package com.example.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class TestPortailWebDriver {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "http://portail.inetpsa.com/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testPortailWebDriver() throws Exception {
    driver.get(baseUrl + "/poe/html/static/Accueil.html#");
    driver.findElement(By.cssSelector("u")).click();
    assertEquals("Comm'Net", driver.getTitle());
    driver.findElement(By.cssSelector("img[alt=\"R�sultats| Groupe\"]")).click();
    driver.findElement(By.linkText("R�sultats commerciaux")).click();
    driver.findElement(By.cssSelector("span.txt_black_12 > a > span.txt_black_12")).click();
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
+------------------------------------------------------------------------------------------------------------+

		* After the export it's required to integrate the code snippet into the test class.
		
*------------------------------------------------------------------------------------------------------------+
|	<<Get the content of method testParcRC()>>                                                               |
*------------------------------------------------------------------------------------------------------------+

+------------------------------------------------------------------------------------------------------------+
		selenium.open("/index.jsp?logout=true");
		selenium.selectFrame("login");
		selenium.click("id=buttonUserLogin");
		selenium.waitForPageToLoad("30000");
		selenium.selectWindow("name=menu");
		selenium.click("//td[2]/div/span");
		selenium.click("//div[@id='listTransaction_1']/div[2]/table/tbody/tr[17]/td[2]/div");
		selenium.selectFrame("relative=up");
		selenium.selectFrame("main");
		selenium.click("id=ecwButtonId");
		selenium.waitForPageToLoad("30000");
		selenium.type("id=codeParc", "CMA");
		selenium.type("id=libelleParc", "PARC CMA");
		selenium.click("id=validate");
		selenium.waitForPageToLoad("30000");	
+------------------------------------------------------------------------------------------------------------+

*------------------------------------------------------------------------------------------------------------+
|	<<and integrate into the java code of the class TestsGestionParcs>>                                      |
*------------------------------------------------------------------------------------------------------------+

+------------------------------------------------------------------------------------------------------------+
	private void creation_parc() throws Exception {
		selenium.open("/index.jsp?logout=true");
		selenium.selectFrame("login");
		selenium.click("id=buttonUserLogin");
		selenium.waitForPageToLoad("30000");
		selenium.selectWindow("name=menu");
		selenium.click("//td[2]/div/span");
		selenium.click("//div[@id='listTransaction_1']/div[2]/table/tbody/tr[17]/td[2]/div");
		selenium.selectFrame("relative=up");
		selenium.selectFrame("main");
		selenium.click("id=ecwButtonId");
		selenium.waitForPageToLoad("30000");
		selenium.type("id=codeParc", "CMA");
		selenium.type("id=libelleParc", "PARC CMA");
		selenium.click("id=validate");
		selenium.waitForPageToLoad("30000");
	}
+------------------------------------------------------------------------------------------------------------+

	* This approach, although working, is not optimal. The recommendation is to create generic methods
	to reuse the code. It is also interesting to use generic methods available in TSF that map Selenium 
	methods by adding the possibility to switch	between the RC mode or WebDriver mode. <<See example below>>

+------------------------------------------------------------------------------------------------------------+
	/**
	 * parc creation tests:
	 * 		- successful creation (code: P1, libell�: LIBELLE P1)
	 * 		- failure creation because of a double (code: P1, libell�: LIBELLE P1)
	 * 		- creation without any code (libell�: LIBELLE P1)
	 * 		- creation without any libell� (code: P1)
	 * @throws Exception the exception
	 */
	@Test
	public void test_parcs_cas2() throws Exception {
		initDatabaseContent_test_cas1();
		LOGGER.info("Execution des cas de tests de cr�ation de parcs");
		TSFECWSeleniumUtils.connection("//button[@id='buttonUserLogin']");	
		enterTransaction();
		cancel_creation_parc();
		access_creation_parc();
		creation_parc_sans_code();
		creation_parc_error_code();
		creation_parc_sans_libelle();
		creation_parc_error_libelle();
		creation_parc_doublon();
		creation_parc("P1", "LIBELLE P1");
		screenshot();
		TSFECWSeleniumUtils.disconnection();
	}
	
	/**
	 * creation parc without code (failure)
	 *
	 * @throws Exception the exception
	 */
	private void creation_parc_sans_code() throws Exception {
		seleniumActions.type("//input[@id='codeParc']", "");
		seleniumActions.type("//input[@id='libelleParc']", "");
		seleniumActions.click("//button[@id='validate']");
		// checking message displayed
		if (!seleniumActions.isTextPresent("Le parc doit �tre renseign�")) {
			screenshot();
			fail("Erreur : Cr�ation d'un parc sans renseigner de code");
		}
		screenshot();
	}
	
	/**
	 * Create a parc.
	 *
	 * @param code the code
	 * @param libelle the libelle
	 * @throws Exception the exception
	 */
	private void creation_parc(String code, String libelle) throws Exception {
		seleniumActions.type("//input[@id='codeParc']", code);
		seleniumActions.type("//input[@id='libelleParc']", libelle);
		screenshot();
		seleniumActions.click("//button[@id='validate']");
		// checking creation in DB
		String actuelle = Dates.date("dd/MM/yyyy");
		String date_db = null;
		String libelle_db = null;
		TSFECWSeleniumUtils.waitElementPresent("//div[@id='tabParcCombo']");
		ResultSet res = TestHSql.select_parc();
		boolean trouve = false;
		while (res.next()) {
			if(res.getString("CODE").equals(code)){
				trouve = true;
				date_db = Dates.convert(res.getString("DATE_CREATION"));
				libelle_db = res.getString("LIBELLE");
			}
		}
		if (!trouve) fail("Erreur de creation du parc: le parc n'est pas pr�sent en base");
		screenshot();
		String libelle_creation = seleniumActions.getText("//div[@id='tabParcCombo']/div[contains(@class,  'ecwTableBody')]/table/tbody/tr[contains(@ecwKeyVal0,'"+code+"')]/td[2]");
		if (!actuelle.equals(date_db)) {
			fail("Erreur de cr�ation du parc: la date de cr�ation en base ne correspond pas � la date actuelle");
		}
		if (!libelle_creation.equalsIgnoreCase(libelle_db)) {
			fail("Erreur de cr�ation du parc: le libell� n'est pas correct en base");
		}
		// checking creation in IHM
		screenshot();
		// checking message displayed
		if (!seleniumActions.isTextPresent("Cr�ation effectu�e")) {
			screenshot();
			fail("Erreur de cr�ation du parc : "+seleniumActions.getText("//div[@id=\"EcwMessageBar\"]"));
		}
		// checking displayed data
		// name, label
		if (!seleniumActions.isTextPresent(code)) {
			screenshot("Erreur de cr�ation du parc: le parc n'est pas affich�");
		}
		if (!libelle_creation.equalsIgnoreCase(libelle)) {
			screenshot();
			fail("Erreur de cr�ation du parc: les donn�es affich�es ne correspondent pas � celles entr�es");
		}
	}	
	....
	....
	....
+------------------------------------------------------------------------------------------------------------+

		* For more detail about the available methods : {{{../tsf-core/apidocs/index.html} see javadoc CORE.}}
		
<<Remark>>
	
	Currently the deveolopment of test HMIs is outsourced at the development platform STIM in China.
	Over time they have developed strong knowledge of Selenium tool during the realisation of test HMIs.
	Today the purpose of using Selenium IDE plugin is mainly to get the names and paths of HTML objects. 
	The test writing is much more generic for better maintenance in case of the HMI evolution.
	


{Execution of test HMIs}

	Once the test class created, the objective is to run this class as other junit class. So the following points
	must be considered :
	
		* Start by creating a simple class TestMain in the project, under run/test/tsf/ for example.

		* Create methods of services or database initialization if necessary

		* Create methods <<public static Test suite()>> containing:

			** Initializations if necessary 

			** Create a new TestSuite

			** Add command <<suite.addTest(new JUnit4TestAdapter(TSFStartNavigateur.class));>> to start Selenium

			** Add test class <<suite.addTest(new JUnit4TestAdapter(TestsGestionParcs.class));>>

			** Once all the test classes listed add the command <<suite.addTest(new JUnit4TestAdapter(TSFStopNavigateur.class));>>
			to stop Selenium.

	<<Example class Main for testing>>
			
+------------------------------------------------------------------------------------------------------------+		
package com.inetpsa.q3p.topologie.test.tsf;

import junit.framework.JUnit4TestAdapter;
import junit.framework.Test;
import junit.framework.TestSuite;

import com.inetpsa.ltp.PyramideResource;
import com.inetpsa.ltp.util.LTPTestCase;
import com.inetpsa.tsf.selenium.utils.TSFStartNavigateur;
import com.inetpsa.tsf.selenium.utils.TSFStopNavigateur;

public class TestMain {	

	/**
	 * Init des services.
	 * si n�cessaire
	 */
	private static void initServices(){
		...
		...
		...	
		// r�f�rencer le fichier de configuration TSF pour Selenium
		System.setProperty("property.path", "/run/com/inetpsa/q3p/topologie/test/tsf/tsfSelenium.properties");		
	}
	
	/**
	 * Init base.
	 * si n�cessaire
	 */
	private static void initBase(){
		...
		...
		...		
	}
	
	public static Test suite() {
		initServices();		
		initBase()
		TestSuite suite = new TestSuite();		
		suite.addTest(new JUnit4TestAdapter(TSFStartNavigateur.class));
		suite.addTest(new JUnit4TestAdapter(TestsGestionParcs.class));
		....
		//Autre classe de test si n�cessaire
		....
		suite.addTest(new JUnit4TestAdapter(TSFStopNavigateur.class));
		return suite;
	}
}
+------------------------------------------------------------------------------------------------------------+			
				
				
		* Create a file <<tsfSelenium.properties>> containing the configuration of tests execution
		(always under run/test/tsf/ for example)
		
+------------------------------------------------------------------------------------------------------------+		
#browser name - nom du browser � utiliser : firefox, chrome, iexplore  
browser=firefox
#time to wait between selenium actions - temps d'attente entre deux commandes 
#(Augmenter si ex�cut� sur une machine peu performante) 
timeToWait=200
#Selenium time out - temps avant timeout Selenium
timeOut=30000
#Selenium server(true: use webdriver, false: use selenium1) - choix entre mode RC = false et WebDriver = true
isWebDriver=false
#Selenium url - url de l'application (local ou sur un cdd / preprod)
url=http://localhost:8080/
#Selenium browse path - le chemin du navigateur dans le cas o� le poste poss�de plusieurs versions du navigateur
#Example: C:/Program Files/Mozilla Firefox/firefox.exe
browserPath=		
+------------------------------------------------------------------------------------------------------------+
						
		* Start your application (back and front end), on your workstation if the tests are to do in local 
		
		* Run tests as JunitTest
		
		* The result of tests is visible in the view eclipse JUnit
		
		[]

[../images/resultat_tsf.jpg]		

		

		  




