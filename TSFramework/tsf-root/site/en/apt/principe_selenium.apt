                                    ------
                                 Selenium Principle
                                    ------
                                  C. MATRANGA
                                    ------
                                  30/09/2013

[../images/logo_tsf_mini_v1.jpg] 

Tool Selenium

* Introduction to Selenium

	Selenium is a set of tools to realize the automation of HMI test of web applications. 
	Selenium provides a wide range of functions exactly adapted to web applications tests. 
	These functions are flexible, in particular they allow to locate the graphical elements 
	and compare the expected result to the result obtained. 
	One of the most interesting Selenium functions is the possibility to run tests on different 
	platforms and with different browsers.

	Selenium is composed of three main tools each one with a specific role in the development of HMI tests. 
	TSF integrates the new Selenium version (version 2), which provides a major evolution in the communication with 
	browser : <<WebDriver>>

=======================================================================

* Selenium IDE

	Selenium IDE is in the form of a Firefox plugin. It provides a simple interface to develop and run the individual 
	test cases or the set of complete tests. Selenium IDE has a functionality save. The user actions are saved and 
	can be replayed later. once saved, the tests can be converted into the most common languages for Web programming 
	(C#, Python, Java, Ruby, Perl, Php). 

	The plugin also adds the functions to Firefox context menu (right click). 
	The user then has access to a list of assertions and verifications for the selected area. 
	Selenium IDE also provides the possibility to edit the saved tests cases more detailedly.
	
[../images/selenium_ide_1.jpg]

	<<Selenium IDE>>


	The toolbar contains the buttons to control the testcase running.
	
[../images/selenium_ide_barre.jpg]

	<<Selenium IDE Toolbar>>


	The functions are as follows :

*--------------------------------------------------+
| Check the speed of tests running                 |
*--------------------------------------------------+

[../images/selenium_ide_barre_1.jpg]

*--------------------------------------------------+
| Run completely the set of tests                  | 
*--------------------------------------------------+

[../images/selenium_ide_barre_2.jpg]

*--------------------------------------------------+
| Run current test                                 | 
*--------------------------------------------------+

[../images/selenium_ide_barre_3.jpg]

*--------------------------------------------------+
| Stop / Restart the set of tests                  |
*--------------------------------------------------+

[../images/selenium_ide_barre_4.jpg]

*--------------------------------------------------+
| Running the set of tests in mode step by step    |
*--------------------------------------------------+

[../images/selenium_ide_barre_5.jpg]

*--------------------------------------------------+
| Group of repetitive Sequence	                   |
*--------------------------------------------------+

[../images/selenium_ide_barre_6.jpg]

*--------------------------------------------------+
| Saving the user actions               	       |
*--------------------------------------------------+

[../images/selenium_ide_barre_7.jpg]



	After saving, the commands are in the main panel of interface. 

[../images/selenium_ide_2.jpg]

	<<Selenium IDE - Interface after saving>>


	The main panel has two tabs. The first tab (Table) allows to view the commands and their parameters.

[../images/selenium_ide_3.jpg]

	<<Selenium IDE - Commands (tab Table)>>

	
	The fields Commande, Cible et Valeur provide the informations about the selected command. 
	These fields can be modified.
	
[../images/selenium_ide_5.jpg]

	<<Selenium IDE - Selenium IDE - Editor of commands>>

	
	The button 'Rechercher' allows to locate an element on the web page.

[../images/selenium_ide_6.jpg]

	<<Selenium IDE - Function search>>


	The second tab (Source) allows to display Selenium commands in the desired format. 
	By default the commands are displayed in HTML but can be changed to a programming 
	language such as Java or C #.

[../images/selenium_ide_4.jpg]

	<<Selenium IDE - Commands (tab Source)>>


	<<Principle of integration>>
	
		This section presents the basic approach of integrating the Selenium code in a development environment.
		TSF goes further by proposing a set of method facilitating the tests integration. 
		{{{./guide_dev_tsf.html}See Guide of dev TSF}}

		At this stage , the produced code can be executed from the graphic interface.
		To go further , we must consider the following points:

		* Running the test in other browsers : actually, the plugin Selenium IDE allows to run
		the test only in Firefox, but it is necessary to check that the application is
		compatible with other browsers such as Internet Explorer or Safari.

		* Management of large numbers of tests: the graphic interface is not viable for the execution of
		several hundred tests

		* Integrated tests : run a test from the graphic interface is convenient when developing 
		the test. However, this is no longer feasible because the interface testing must be integrated 
		with other application tests (unit tests, etc.).

		* Modification and variation of tests: the interface doesn't allow to run the same test
		with different parameters, the only solution would be modifying the test, then re-running 
		it for several times .

		The integration step is simplified since Selenium can generate a JUnit test.
		Just click the menu <<File>> of Selenium IDE and <<Export the test under>>.
		More possibilities are offered to you
 
				  
[../images/selenium_ide_7.jpg]

	<<Selenium IDE - Export the test under>>

		Detail about the Java exports:
		
*-----------------------------------+----------------------------------------------------------------------------------------------------------------------+
| Java / Junit 4 / WebDriver        | Export as a java class using WebDriver mode (communication API specific to each browser) and framework Junit 4       |
*-----------------------------------+----------------------------------------------------------------------------------------------------------------------+
| Java / Junit 4 / WebDriver backed | Export as a java class using Compatible WebDriver mode (if the tests have been written for RC) and framework Junit 4 |
*-----------------------------------+----------------------------------------------------------------------------------------------------------------------+
| Java / Junit 4 / Remote Control   | Export as a java class using the selenium RC mode (working with a selenium RC server) and Junit 4 test framework     |
*-----------------------------------+----------------------------------------------------------------------------------------------------------------------+
| Java / Junit 3 / Remote Control   | Export as a java class using the selenium RC mode and Junit 3 test framework (for compatibility)                     |
*-----------------------------------+----------------------------------------------------------------------------------------------------------------------+	
| Java / TestNG  / Remote Control   | Export as a java class using the selenium RC mode and TestNG test framework                                          |
*-----------------------------------+----------------------------------------------------------------------------------------------------------------------+

		<<Example of exports:>>

[../images/selenium_export_webdriver.jpg]

		<<Selenium IDE - Code java exported in mode Junit4 - WebDriver>>


[../images/selenium_export_rc.jpg]

		<<Selenium IDE - Code java exported in mode Junit4 - Remote Control>>


	** Integrating the code to an Eclipse project
	
		The part integrating the code generated in the development environment is here : 
		{{{./guide_dev_tsf.html}Guide of development with TSF}}.


=======================================================================

* Selenium RC (Remote Control)

	Selenium RC provides an API and a library for each language supported by Selenium. This allows to 
	develop the tests by using a high level programming language. 
	Selenium RC is as a server to control a local or remote web browser. 
	It works as a HTTP proxy for web requests.
	
[../images/selenium_rc_1.jpg]

		<<Selenium RC - Remote Control>>
			
	The Selenium server receives the commands of test program, interprets them and reports the test results. 
	Selenium RC also embeds Selenium Core which is a Java program interpreting and running the Selenium 
	commands by using the browser JavaScript interpreter.
	The server receives Selenium commands through the simple GET/POST HTTP requests. This means any language 
	that can send HTTP requests can be used to automate Selenium tests.

	Selenium RC also provides a client library for each programming language. The client library takes a 
	Selenium command and sends it to the server to run it.
	The server sends back the result of the command to the library. The response can be interpreted by 
	the program as a success or a failure.

=======================================================================
			
* Selenium WebDriver
	
	The most remarkable change in selenium 2.0 was adding the WebDriver API. It allows to control a
	browser natively, locally or remotely via Selenium Server. it marks a leap forward in terms of 
	the browser automation.

	Selenium WebDriver retakes the role of Selenium RC, by reintegrating 1.x links of module RC and adding
	also the specific primitives of the browsers control. "WebDriver" is sometimes referenced as Selenium 2 
	(Selenium 1.0 + WebDriver = Selenium 2.0).
    
		* WebDriver is designed as a simple and conciser programming interface, to solve some limitations of 
		Selenium-RC API.

		* WebDriver is an object oriented API much more compact compared to Selenium 1.0

		* It controls the browser more effectively and surpasses the limitations of Selenium 1.x, which
		limited the coverage of functional test, in some cases such as "upload" or "download", the
		pop-ups or dialog windows .

	WebDriver is the name of the standard interface for writing tests in Java , however some classes
	specific to the browsers are provided :
	
*------------------------+
| AndroidDriver          |
*------------------------+
| ChromeDriver           |
*------------------------+
| EventFiringWebDriver   |
*------------------------+
| FirefoxDriver          |
*------------------------+
| HtmlUnitDriver         |
*------------------------+
| InternetExplorerDriver |
*------------------------+
| IPhoneDriver           |
*------------------------+
| PhantomJSDriver        |
*------------------------+
| RemoteWebDriver        |
*------------------------+
| SafariDriver           |
*------------------------+


=======================================================================
			
* Selenium Grid
	
	Selenium Grid allows the solution Selenium RC / WebDriver to classify the tests to be performed in
	different environments (OS and browser). Selenium Grid makes solution Selenium 2.0 scalable.

	At startup, each configuration must be saved for the Hub Grid. When the tests are launched, 
	they are redirected by the Hub to a Selenium RC / WebDriver server that will launch the browser and 
	run the test, this also allows to run tests in parallel.

	With the release of Selenium 2.0, Selenium server has integrated the functionality Grid and is no 
	longer an additional module.

[../images/selenium_grid_1.jpg]

		<<Selenium RC - Classical Selenium Configuration (cas RC)>>
	
	
[../images/selenium_grid_2.jpg]

		<<Selenium RC - Configuration with Selenium Grid (cas RC)>>


* More info

	{{{http://www.seleniumhq.org/}Documentation Selenium}}
	
	 